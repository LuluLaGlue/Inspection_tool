#!/usr/bin/env python
# coding: utf-8
# Comparaison de flux video avec une image de reference
# Par Lucien Sigayret
# 30 - 09 - 2020
# Version @0.9

import cv2
import imutils
import argparse
import os
import sys
import time
import multiprocessing
import numpy as np
from datetime import datetime
from skimage.metrics import structural_similarity
from matplotlib import pyplot as plt

def arg_parser():
    parser = argparse.ArgumentParser(description='Monitor camera feed')
    
    parser.add_argument("-n", "--number", type=int, 
    #                     required=True, 
                        help="Number of cameras to monitor")
    parser.add_argument('-p', '--path', 
                        required=True, 
                        help='Path to reference image')
    parser.add_argument('-v', '--video',
                        required=True,
                        help="Path to video feed")
    parser.add_argument('-s', '--size',
                        required=True,
                        help="sizes of the reference image or video feed: width,height")
    parser.add_argument('-d', '--destination',
                       required=True,
                       help="Path to the folder in which to save resulting images")
    parser.add_argument('-m', '--meter', type=int,
                       required=True,
                       help="Production line speed in m/min")

    argv = vars(parser.parse_args())
    argv["width"] = int(argv["size"].split(',')[0])
    argv["height"] = int(argv["size"].split(',')[1])
    argv.pop('size')
    argv["meter"] = argv["meter"]/60
    print("Images will be saved in the "+argv["destination"]+" folder.")
    return argv

def error_message(message):
    print('# ------------- ERROR ------------- #')
    for i in message:
        print(i)
    print('# --------- SCRIPT STOPPED --------- #')
    sys.exit(1)

def video_comp(cam_num):
    try:
        print("Connecting to camera feed...")
        capture = cv2.VideoCapture(cam_num)
        if capture is None or not capture.isOpened():
            error_message(["Unable to capture video feed/read video file: {}.".format(str(cam_num)), "Please check the -v argument."])
            
        print("Connection ok.")
        ref_frame_tmp = cv2.imread(argv["path"])
        ref_frame_tmp = cv2.resize(ref_frame_tmp, (argv["width"], argv["height"]), interpolation = cv2.INTER_AREA)
        ref_frame = cv2.cvtColor(ref_frame_tmp, cv2.COLOR_BGR2GRAY)
        ref_smooth = cv2.bilateralFilter(ref_frame, 9, 75, 75)
        del(ref_frame_tmp, ref_frame)
        print("Beginning monitoring...")
        while(True):
            contours_circles = []
            ret, frame = capture.read()
            frame = cv2.resize(frame, (argv["width"], argv["height"]), interpolation = cv2.INTER_AREA)
            frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            frame_smooth = cv2.bilateralFilter(frame_gray, 9, 75, 75)
            (score, diff) = structural_similarity(ref_smooth, frame_smooth, full=True)
            diff = (diff * 255).astype("uint8")
            del(frame_gray)
            #Score goes from -1 to 1 with 1 being 2 identical images
            #Diff contains the image difference between video and reference
            if score < 0.9:
                print("Flaw detected with a score of: {}".format(score))
                thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
                cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                cnts = imutils.grab_contours(cnts)

                #Drawing rectangle arround difference
                for i in cnts:
                    (x, y, w, h) = cv2.boundingRect(i)
                    aspect_ratio = float(w)/h
                    area = cv2.contourArea(i)
    #                 if (area < 18000) & (aspect_ratio < 3.5):
                    contours_circles.append(i)
                    counting = len(contours_circles)
            
                #Creating histogram
                tmp_hist = plt.hist(frame_smooth.ravel(), 256, [0, 256])
                plt.title('Grayscale Histogram')
                plt.xlabel('Intensity')
                plt.grid(True, which='both', axis='both', linestyle='--')
                axes = plt.gca()
                axes.set_xlim([0, 250])
                axes.set_ylim([0, 10000])
                
                font = cv2.FONT_HERSHEY_SIMPLEX
                draw = cv2.drawContours(frame, contours_circles, -1, (0, 255, 0), 2)
                cv2.putText(draw, "Number of defects: " + str(counting), (10, 450), font, 1, (0, 0, 255), 2, cv2.LINE_AA)
                
                date = datetime.now()
                print("Saving image and histogram...")
                if os.path.exists(argv["destination"]) & os.path.isdir(argv["destination"]):
                    os.mkdir(argv["destination"] + "/Flaw_"+str(date))
                    cv2.imwrite(argv["destination"]+"/Flaw_"+str(date)+"/Photo_"+str(date)+".png", draw)
                    plt.savefig(argv["destination"]+"/Flaw_"+str(date)+"/Hist_"+str(date)+".png")
                else:
                    print("Creating destination folder...")
                    os.mkdir(argv["destination"])
                    os.mkdir(argv["destination"] + "/Flaw_"+str(date))
                    cv2.imwrite(argv["destination"]+"/Flaw_"+str(date)+"/Photo_"+str(date)+".png", draw)
                    plt.savefig(argv["destination"]+"/Flaw_"+str(date)+"/Hist_"+str(date)+".png")
                    
                print("Image and histogram saved in " + argv["destination"])
                print("Waiting for flaw to clear away...")
                time.sleep(3/argv["meter"]) #3 is the filmed distance of the monitored line
                print("Continuing monitoring.")
#             cv2.imshow("Video Feed", draw)

        capture.release()
        cv2.destroyAllWindows()

    except KeyboardInterrupt:
        print('\n# ------------- STOP ------------- #')
        print('Script succesfully terminated by user. \nResulting images (if existing) can be found in the '+argv["destination"]+' folder.')
        sys.exit(0)
    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback_details = {'lineno': exc_traceback.tb_lineno,
                            'name': exc_type.__name__,
                            }
        del(exc_type, exc_value, exc_traceback)
        error_message(['Something went wrong on line {}.'.format(str(traceback_details["lineno"])), "Error type: {}".format(traceback_details["name"])])

# ---------- IN CASE OF MULTIPLE CAMERAS ---------- #
#When launching script use the -n option to set the #
#total number of cameras.                           #
#Decomment next lines and delete the last two ones. #
# --------------------------------------------------#

#Decomment the following lines
# i = 0
# cam_id = []
# while i < argv["number"]:
#     cam_id.append(i)
#     i++
# p = multiprocessing.Pool()
# p.map(video_comp, cam_id)

#Delete these two lines
argv = arg_parser()
video_comp(argv["video"])
sys.exit(0)
